package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Keywords;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table KEYWORDS.
*/
public class KeywordsDao extends AbstractDao<Keywords, Long> {

    public static final String TABLENAME = "KEYWORDS";

    /**
     * Properties of entity Keywords.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Lang_no = new Property(0, Long.class, "Lang_no", true, "LANG_NO");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
    };


    public KeywordsDao(DaoConfig config) {
        super(config);
    }
    
    public KeywordsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'KEYWORDS' (" + //
                "'LANG_NO' INTEGER PRIMARY KEY ," + // 0: Lang_no
                "'NAME' TEXT);"); // 1: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'KEYWORDS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Keywords entity) {
        stmt.clearBindings();
 
        Long Lang_no = entity.getLang_no();
        if (Lang_no != null) {
            stmt.bindLong(1, Lang_no);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Keywords readEntity(Cursor cursor, int offset) {
        Keywords entity = new Keywords( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Lang_no
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Keywords entity, int offset) {
        entity.setLang_no(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Keywords entity, long rowId) {
        entity.setLang_no(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Keywords entity) {
        if(entity != null) {
            return entity.getLang_no();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
