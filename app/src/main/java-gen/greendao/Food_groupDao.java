package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Food_group;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FOOD_GROUP.
*/
public class Food_groupDao extends AbstractDao<Food_group, Long> {

    public static final String TABLENAME = "FOOD_GROUP";

    /**
     * Properties of entity Food_group.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Fdgrp_no = new Property(0, Long.class, "Fdgrp_no", true, "FDGRP_NO");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
    };


    public Food_groupDao(DaoConfig config) {
        super(config);
    }
    
    public Food_groupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FOOD_GROUP' (" + //
                "'FDGRP_NO' INTEGER PRIMARY KEY ," + // 0: Fdgrp_no
                "'NAME' TEXT);"); // 1: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FOOD_GROUP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Food_group entity) {
        stmt.clearBindings();
 
        Long Fdgrp_no = entity.getFdgrp_no();
        if (Fdgrp_no != null) {
            stmt.bindLong(1, Fdgrp_no);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Food_group readEntity(Cursor cursor, int offset) {
        Food_group entity = new Food_group( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Fdgrp_no
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Food_group entity, int offset) {
        entity.setFdgrp_no(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Food_group entity, long rowId) {
        entity.setFdgrp_no(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Food_group entity) {
        if(entity != null) {
            return entity.getFdgrp_no();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
