package greendao;

import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table WEIGHT.
 */
public class Weight {

    private Long w_id;
    private Float amount;
    private String name;
    private Float gram_weight;
    private Long NDB_no;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient WeightDao myDao;

    private Food_desc food_desc;
    private Long food_desc__resolvedKey;


    public Weight() {
    }

    public Weight(Long w_id) {
        this.w_id = w_id;
    }

    public Weight(Long w_id, Float amount, String name, Float gram_weight, Long NDB_no) {
        this.w_id = w_id;
        this.amount = amount;
        this.name = name;
        this.gram_weight = gram_weight;
        this.NDB_no = NDB_no;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWeightDao() : null;
    }

    public Long getW_id() {
        return w_id;
    }

    public void setW_id(Long w_id) {
        this.w_id = w_id;
    }

    public Float getAmount() {
        return amount;
    }

    public void setAmount(Float amount) {
        this.amount = amount;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Float getGram_weight() {
        return gram_weight;
    }

    public void setGram_weight(Float gram_weight) {
        this.gram_weight = gram_weight;
    }

    public Long getNDB_no() {
        return NDB_no;
    }

    public void setNDB_no(Long NDB_no) {
        this.NDB_no = NDB_no;
    }

    /** To-one relationship, resolved on first access. */
    public Food_desc getFood_desc() {
        Long __key = this.NDB_no;
        if (food_desc__resolvedKey == null || !food_desc__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            Food_descDao targetDao = daoSession.getFood_descDao();
            Food_desc food_descNew = targetDao.load(__key);
            synchronized (this) {
                food_desc = food_descNew;
            	food_desc__resolvedKey = __key;
            }
        }
        return food_desc;
    }

    public void setFood_desc(Food_desc food_desc) {
        synchronized (this) {
            this.food_desc = food_desc;
            NDB_no = food_desc == null ? null : food_desc.getNDB_no();
            food_desc__resolvedKey = NDB_no;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
