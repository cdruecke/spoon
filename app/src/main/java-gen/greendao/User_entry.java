package greendao;

import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table USER_ENTRY.
 */
public class User_entry {

    private Long ue_id;
    private java.util.Date date;
    private Float serv_amt;
    private Long w_id;
    private Long NDB_no;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient User_entryDao myDao;

    private Weight weight;
    private Long weight__resolvedKey;

    private Food_desc food_desc;
    private Long food_desc__resolvedKey;


    public User_entry() {
    }

    public User_entry(Long ue_id) {
        this.ue_id = ue_id;
    }

    public User_entry(Long ue_id, java.util.Date date, Float serv_amt, Long w_id, Long NDB_no) {
        this.ue_id = ue_id;
        this.date = date;
        this.serv_amt = serv_amt;
        this.w_id = w_id;
        this.NDB_no = NDB_no;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUser_entryDao() : null;
    }

    public Long getUe_id() {
        return ue_id;
    }

    public void setUe_id(Long ue_id) {
        this.ue_id = ue_id;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public Float getServ_amt() {
        return serv_amt;
    }

    public void setServ_amt(Float serv_amt) {
        this.serv_amt = serv_amt;
    }

    public Long getW_id() {
        return w_id;
    }

    public void setW_id(Long w_id) {
        this.w_id = w_id;
    }

    public Long getNDB_no() {
        return NDB_no;
    }

    public void setNDB_no(Long NDB_no) {
        this.NDB_no = NDB_no;
    }

    /** To-one relationship, resolved on first access. */
    public Weight getWeight() {
        Long __key = this.w_id;
        if (weight__resolvedKey == null || !weight__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WeightDao targetDao = daoSession.getWeightDao();
            Weight weightNew = targetDao.load(__key);
            synchronized (this) {
                weight = weightNew;
            	weight__resolvedKey = __key;
            }
        }
        return weight;
    }

    public void setWeight(Weight weight) {
        synchronized (this) {
            this.weight = weight;
            w_id = weight == null ? null : weight.getW_id();
            weight__resolvedKey = w_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Food_desc getFood_desc() {
        Long __key = this.NDB_no;
        if (food_desc__resolvedKey == null || !food_desc__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            Food_descDao targetDao = daoSession.getFood_descDao();
            Food_desc food_descNew = targetDao.load(__key);
            synchronized (this) {
                food_desc = food_descNew;
            	food_desc__resolvedKey = __key;
            }
        }
        return food_desc;
    }

    public void setFood_desc(Food_desc food_desc) {
        synchronized (this) {
            this.food_desc = food_desc;
            NDB_no = food_desc == null ? null : food_desc.getNDB_no();
            food_desc__resolvedKey = NDB_no;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
