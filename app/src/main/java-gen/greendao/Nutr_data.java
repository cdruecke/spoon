package greendao;

import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table NUTR_DATA.
 */
public class Nutr_data {

    private Float nutrient_amt;
    private Long NDB_no;
    private Long Nutr_no;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient Nutr_dataDao myDao;

    private Food_desc food_desc;
    private Long food_desc__resolvedKey;

    private Nutr_def nutr_def;
    private Long nutr_def__resolvedKey;


    public Nutr_data() {
    }

    public Nutr_data(Float nutrient_amt, Long NDB_no, Long Nutr_no) {
        this.nutrient_amt = nutrient_amt;
        this.NDB_no = NDB_no;
        this.Nutr_no = Nutr_no;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNutr_dataDao() : null;
    }

    public Float getNutrient_amt() {
        return nutrient_amt;
    }

    public void setNutrient_amt(Float nutrient_amt) {
        this.nutrient_amt = nutrient_amt;
    }

    public Long getNDB_no() {
        return NDB_no;
    }

    public void setNDB_no(Long NDB_no) {
        this.NDB_no = NDB_no;
    }

    public Long getNutr_no() {
        return Nutr_no;
    }

    public void setNutr_no(Long Nutr_no) {
        this.Nutr_no = Nutr_no;
    }

    /** To-one relationship, resolved on first access. */
    public Food_desc getFood_desc() {
        Long __key = this.NDB_no;
        if (food_desc__resolvedKey == null || !food_desc__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            Food_descDao targetDao = daoSession.getFood_descDao();
            Food_desc food_descNew = targetDao.load(__key);
            synchronized (this) {
                food_desc = food_descNew;
            	food_desc__resolvedKey = __key;
            }
        }
        return food_desc;
    }

    public void setFood_desc(Food_desc food_desc) {
        synchronized (this) {
            this.food_desc = food_desc;
            NDB_no = food_desc == null ? null : food_desc.getNDB_no();
            food_desc__resolvedKey = NDB_no;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Nutr_def getNutr_def() {
        Long __key = this.Nutr_no;
        if (nutr_def__resolvedKey == null || !nutr_def__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            Nutr_defDao targetDao = daoSession.getNutr_defDao();
            Nutr_def nutr_defNew = targetDao.load(__key);
            synchronized (this) {
                nutr_def = nutr_defNew;
            	nutr_def__resolvedKey = __key;
            }
        }
        return nutr_def;
    }

    public void setNutr_def(Nutr_def nutr_def) {
        synchronized (this) {
            this.nutr_def = nutr_def;
            Nutr_no = nutr_def == null ? null : nutr_def.getNutr_no();
            nutr_def__resolvedKey = Nutr_no;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
