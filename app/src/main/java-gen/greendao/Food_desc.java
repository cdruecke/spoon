package greendao;

import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table FOOD_DESC.
 */
public class Food_desc {

    private Long NDB_no;
    private String name;
    private Long Fdgrp_no;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient Food_descDao myDao;

    private Food_group food_group;
    private Long food_group__resolvedKey;


    public Food_desc() {
    }

    public Food_desc(Long NDB_no) {
        this.NDB_no = NDB_no;
    }

    public Food_desc(Long NDB_no, String name, Long Fdgrp_no) {
        this.NDB_no = NDB_no;
        this.name = name;
        this.Fdgrp_no = Fdgrp_no;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFood_descDao() : null;
    }

    public Long getNDB_no() {
        return NDB_no;
    }

    public void setNDB_no(Long NDB_no) {
        this.NDB_no = NDB_no;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Long getFdgrp_no() {
        return Fdgrp_no;
    }

    public void setFdgrp_no(Long Fdgrp_no) {
        this.Fdgrp_no = Fdgrp_no;
    }

    /** To-one relationship, resolved on first access. */
    public Food_group getFood_group() {
        Long __key = this.Fdgrp_no;
        if (food_group__resolvedKey == null || !food_group__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            Food_groupDao targetDao = daoSession.getFood_groupDao();
            Food_group food_groupNew = targetDao.load(__key);
            synchronized (this) {
                food_group = food_groupNew;
            	food_group__resolvedKey = __key;
            }
        }
        return food_group;
    }

    public void setFood_group(Food_group food_group) {
        synchronized (this) {
            this.food_group = food_group;
            Fdgrp_no = food_group == null ? null : food_group.getFdgrp_no();
            food_group__resolvedKey = Fdgrp_no;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
